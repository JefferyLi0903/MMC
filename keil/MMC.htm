<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\MMC.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\MMC.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Wed Jun 29 12:49:31 2022
<BR><P>
<H3>Maximum Stack Usage =        200 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
RSSI_Scan_Done &rArr; RSSIScanHandler &rArr; RSSIScanscreen &rArr; floor &rArr; __aeabi_cdrcmple
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[1d]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[5e]">int_to_str</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5e]">int_to_str</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[8]">Demodulated_Data_Dump_Done</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[7]">FM_IQ_Dump_Done</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[19]">KEY0_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[f]">KEY10_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[e]">KEY11_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[d]">KEY12_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[c]">KEY13_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[b]">KEY14_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[a]">KEY15_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[18]">KEY1_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[17]">KEY2_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[16]">KEY3_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[15]">KEY4_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[14]">KEY5_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[13]">KEY6_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[12]">KEY7_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[11]">KEY8_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[10]">KEY9_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[9]">RSSI_Scan_Done</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[1b]">Reset_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[6]">UART_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[1c]">__main</a> from __main.o(!!!main) referenced from startup_cmsdk_cm0.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1c]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[1e]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[20]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[83]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[84]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[21]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[85]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[25]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[86]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[87]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[88]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[89]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[8a]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[8b]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[8c]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[8d]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[8e]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[8f]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[90]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[91]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[92]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[93]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[94]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[95]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[96]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[97]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[98]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[99]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[9a]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[2a]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[9b]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[9c]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[9d]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[9e]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[9f]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[a0]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[a1]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[a2]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[1f]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[a3]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[22]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[24]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[a4]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[26]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; exit
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a5]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[53]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[29]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[a6]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[2b]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[1b]"></a>Reset_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[8]"></a>Demodulated_Data_Dump_Done</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Demodulated_Data_Dump_Done &rArr; UARTFM_Demodulated_Data_Dump_Done_Handler &rArr; int_to_str &rArr;  int_to_str (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFM_Demodulated_Data_Dump_Done_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>FM_IQ_Dump_Done</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FM_IQ_Dump_Done &rArr; UARTFM_IQ_Dump_Done_Handler &rArr; int_to_str &rArr;  int_to_str (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFM_IQ_Dump_Done_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>UART_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UART_Handler &rArr; UARTHandle &rArr; ChannelSelection_control &rArr; singleFrequencyRSSI &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>RSSI_Scan_Done</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = RSSI_Scan_Done &rArr; RSSIScanHandler &rArr; RSSIScanscreen &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSSIScanHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>KEY0_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KEY0_Handler &rArr; KEY0 &rArr; regWrite &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>KEY1_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KEY1_Handler &rArr; KEY1 &rArr; regWrite &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>KEY2_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KEY2_Handler &rArr; KEY2 &rArr; regWrite &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>KEY3_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KEY3_Handler &rArr; KEY3 &rArr; regWrite &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>KEY4_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KEY4_Handler &rArr; KEY4 &rArr; regWrite &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>KEY5_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KEY5_Handler &rArr; KEY5 &rArr; regWrite &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>KEY6_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KEY6_Handler &rArr; KEY6 &rArr; regWrite &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY6
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>KEY7_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KEY7_Handler &rArr; KEY7 &rArr; regWrite &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY7
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>KEY8_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KEY8_Handler &rArr; KEY8 &rArr; regWrite &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>KEY9_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KEY9_Handler &rArr; KEY9 &rArr; regWrite &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY9
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>KEY10_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KEY10_Handler &rArr; KEY10 &rArr; regWrite &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY10
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>KEY11_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KEY11_Handler &rArr; KEY11 &rArr; regWrite &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY11
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>KEY12_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KEY12_Handler &rArr; KEY12 &rArr; regWrite &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY12
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>KEY13_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KEY13_Handler &rArr; KEY13 &rArr; regWrite &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY13
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>KEY14_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KEY14_Handler &rArr; KEY14 &rArr; regWrite &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY14
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>KEY15_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KEY15_Handler &rArr; KEY15 &rArr; regWrite &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY15
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_cmsdk_cm0.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[75]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTString
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Channel_control
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_to_str
</UL>

<P><STRONG><a name="[a9]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSSIScanscreen
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSSIScanHandler
</UL>

<P><STRONG><a name="[ac]"></a>_d2f</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, d2f.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSSIScanscreen
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSSIScanHandler
</UL>

<P><STRONG><a name="[41]"></a>_dadd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[ad]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)

<P><STRONG><a name="[44]"></a>_dsub</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>

<P><STRONG><a name="[45]"></a>_drsb</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singleFrequencyRSSI
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regWrite
</UL>

<P><STRONG><a name="[ae]"></a>_dfix</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, dfixi.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSSIScanscreen
</UL>

<P><STRONG><a name="[af]"></a>_dfixu</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dfixui.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singleFrequencyRSSI
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regWrite
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSSIScanscreen
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSSIScanHandler
</UL>

<P><STRONG><a name="[b0]"></a>_f2d</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, f2d.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singleFrequencyRSSI
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regWrite
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSSIScanscreen
</UL>

<P><STRONG><a name="[47]"></a>_fdiv</STRONG> (Thumb, 334 bytes, Stack size 20 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frdiv
</UL>

<P><STRONG><a name="[46]"></a>_frdiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[7b]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ffixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singleFrequencyRSSI
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regWrite
</UL>

<P><STRONG><a name="[b1]"></a>_ffix</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ffixi.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSSIScanscreen
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Channel_control
</UL>

<P><STRONG><a name="[b2]"></a>_ffixu</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ffixui.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[48]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singleFrequencyRSSI
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regWrite
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSSIScanscreen
</UL>

<P><STRONG><a name="[b3]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSSIScanscreen
</UL>

<P><STRONG><a name="[b4]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>__fpl_dcmp_InfNaN</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, dcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[4e]"></a>__fpl_fcmp_InfNaN</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, fcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[4c]"></a>__fpl_cmpreturn</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, cmpret.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[4d]"></a>__fpl_dcheck_NaN2</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[4f]"></a>__fpl_fcheck_NaN2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[23]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[28]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[50]"></a>__fpl_return_NaN</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, retnan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
</UL>

<P><STRONG><a name="[b5]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b6]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[b7]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>Bubbling</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, code_def.o(i.Bubbling))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Bubbling
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSSIScanscreen
</UL>

<P><STRONG><a name="[54]"></a>ChannelSelection_control</STRONG> (Thumb, 5260 bytes, Stack size 16 bytes, channelselection_control.o(i.ChannelSelection_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ChannelSelection_control &rArr; singleFrequencyRSSI &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singleFrequencyRSSI
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteUART
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTString
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_FM_command
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_FM_command
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RFD
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSSI_scan_cmd
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_Dump_command
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demodulated_Data_Dump_command
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Channel_control
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_to_str
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTHandle
</UL>

<P><STRONG><a name="[5f]"></a>Channel_control</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, code_def.o(i.Channel_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Channel_control &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChannelSelection_control
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY9
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY8
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY7
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY6
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY5
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY4
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY3
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY2
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY15
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY14
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY13
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY12
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY11
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY10
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY1
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY0
</UL>

<P><STRONG><a name="[74]"></a>Delay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, code_def.o(i.Delay))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTString
</UL>

<P><STRONG><a name="[5c]"></a>Demodulated_Data_Dump_command</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, code_def.o(i.Demodulated_Data_Dump_command))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChannelSelection_control
</UL>

<P><STRONG><a name="[5b]"></a>IQ_Dump_command</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, code_def.o(i.IQ_Dump_command))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChannelSelection_control
</UL>

<P><STRONG><a name="[31]"></a>KEY0</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, code_def.o(i.KEY0))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KEY0 &rArr; regWrite &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regWrite
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTString
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Channel_control
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY0_Handler
</UL>

<P><STRONG><a name="[32]"></a>KEY1</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, code_def.o(i.KEY1))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KEY1 &rArr; regWrite &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regWrite
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTString
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Channel_control
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY1_Handler
</UL>

<P><STRONG><a name="[3b]"></a>KEY10</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, code_def.o(i.KEY10))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KEY10 &rArr; regWrite &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regWrite
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTString
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Channel_control
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY10_Handler
</UL>

<P><STRONG><a name="[3c]"></a>KEY11</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, code_def.o(i.KEY11))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KEY11 &rArr; regWrite &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regWrite
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTString
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Channel_control
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY11_Handler
</UL>

<P><STRONG><a name="[3d]"></a>KEY12</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, code_def.o(i.KEY12))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KEY12 &rArr; regWrite &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regWrite
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTString
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Channel_control
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY12_Handler
</UL>

<P><STRONG><a name="[3e]"></a>KEY13</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, code_def.o(i.KEY13))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KEY13 &rArr; regWrite &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regWrite
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTString
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Channel_control
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY13_Handler
</UL>

<P><STRONG><a name="[3f]"></a>KEY14</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, code_def.o(i.KEY14))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KEY14 &rArr; regWrite &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regWrite
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTString
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Channel_control
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY14_Handler
</UL>

<P><STRONG><a name="[40]"></a>KEY15</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, code_def.o(i.KEY15))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KEY15 &rArr; regWrite &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regWrite
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTString
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Channel_control
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY15_Handler
</UL>

<P><STRONG><a name="[33]"></a>KEY2</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, code_def.o(i.KEY2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KEY2 &rArr; regWrite &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regWrite
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTString
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Channel_control
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY2_Handler
</UL>

<P><STRONG><a name="[34]"></a>KEY3</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, code_def.o(i.KEY3))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KEY3 &rArr; regWrite &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regWrite
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTString
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Channel_control
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY3_Handler
</UL>

<P><STRONG><a name="[35]"></a>KEY4</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, code_def.o(i.KEY4))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KEY4 &rArr; regWrite &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regWrite
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTString
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Channel_control
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY4_Handler
</UL>

<P><STRONG><a name="[36]"></a>KEY5</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, code_def.o(i.KEY5))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KEY5 &rArr; regWrite &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regWrite
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTString
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Channel_control
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY5_Handler
</UL>

<P><STRONG><a name="[37]"></a>KEY6</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, code_def.o(i.KEY6))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KEY6 &rArr; regWrite &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regWrite
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTString
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Channel_control
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY6_Handler
</UL>

<P><STRONG><a name="[38]"></a>KEY7</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, code_def.o(i.KEY7))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KEY7 &rArr; regWrite &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regWrite
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTString
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Channel_control
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY7_Handler
</UL>

<P><STRONG><a name="[39]"></a>KEY8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, code_def.o(i.KEY8))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KEY8 &rArr; regWrite &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regWrite
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTString
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Channel_control
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY8_Handler
</UL>

<P><STRONG><a name="[3a]"></a>KEY9</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, code_def.o(i.KEY9))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KEY9 &rArr; regWrite &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regWrite
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTString
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Channel_control
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY9_Handler
</UL>

<P><STRONG><a name="[30]"></a>RSSIScanHandler</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, code_def.o(i.RSSIScanHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = RSSIScanHandler &rArr; RSSIScanscreen &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singleFrequencyRSSI
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTString
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSSI_scan_cmd
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSSI_read
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSSI_done
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSSIScanscreen
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSSI_Scan_Done
</UL>

<P><STRONG><a name="[6a]"></a>RSSIScanscreen</STRONG> (Thumb, 608 bytes, Stack size 120 bytes, code_def.o(i.RSSIScanscreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = RSSIScanscreen &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bubbling
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSSIScanHandler
</UL>

<P><STRONG><a name="[65]"></a>RSSI_done</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, code_def.o(i.RSSI_done))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSSIScanHandler
</UL>

<P><STRONG><a name="[64]"></a>RSSI_read</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, code_def.o(i.RSSI_read))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSSIScanHandler
</UL>

<P><STRONG><a name="[5a]"></a>RSSI_scan_cmd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, code_def.o(i.RSSI_scan_cmd))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChannelSelection_control
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSSIScanHandler
</UL>

<P><STRONG><a name="[73]"></a>ReadUART</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, code_def.o(i.ReadUART))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTHandle
</UL>

<P><STRONG><a name="[76]"></a>ReadUARTState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, code_def.o(i.ReadUARTState))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteUART
</UL>

<P><STRONG><a name="[5d]"></a>SPI_RFD</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, code_def.o(i.SPI_RFD))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_RFD
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChannelSelection_control
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIwrite
</UL>

<P><STRONG><a name="[72]"></a>SPIwrite</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, code_def.o(i.SPIwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPIwrite &rArr; SPI_RFD
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RFD
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singleFrequencyRSSI
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regWrite
</UL>

<P><STRONG><a name="[55]"></a>Start_FM_command</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, code_def.o(i.Start_FM_command))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChannelSelection_control
</UL>

<P><STRONG><a name="[58]"></a>Stop_FM_command</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, code_def.o(i.Stop_FM_command))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChannelSelection_control
</UL>

<P><STRONG><a name="[2d]"></a>UARTFM_Demodulated_Data_Dump_Done_Handler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, code_def.o(i.UARTFM_Demodulated_Data_Dump_Done_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UARTFM_Demodulated_Data_Dump_Done_Handler &rArr; int_to_str &rArr;  int_to_str (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTString
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_to_str
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demodulated_Data_Dump_Done
</UL>

<P><STRONG><a name="[2e]"></a>UARTFM_IQ_Dump_Done_Handler</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, code_def.o(i.UARTFM_IQ_Dump_Done_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UARTFM_IQ_Dump_Done_Handler &rArr; int_to_str &rArr;  int_to_str (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTString
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_to_str
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_IQ_Dump_Done
</UL>

<P><STRONG><a name="[2f]"></a>UARTHandle</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, code_def.o(i.UARTHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UARTHandle &rArr; ChannelSelection_control &rArr; singleFrequencyRSSI &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChannelSelection_control
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUART
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Handler
</UL>

<P><STRONG><a name="[56]"></a>UARTString</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, code_def.o(i.UARTString))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UARTString &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteUART
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChannelSelection_control
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFM_IQ_Dump_Done_Handler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFM_Demodulated_Data_Dump_Done_Handler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSSIScanHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY9
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY8
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY7
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY6
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY5
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY4
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY3
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY2
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY15
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY14
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY13
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY12
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY11
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY10
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY1
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY0
</UL>

<P><STRONG><a name="[57]"></a>WriteUART</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, code_def.o(i.WriteUART))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = WriteUART
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUARTState
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChannelSelection_control
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTString
</UL>

<P><STRONG><a name="[70]"></a>floor</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, floor.o(i.floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singleFrequencyRSSI
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regWrite
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSSIScanscreen
</UL>

<P><STRONG><a name="[5e]"></a>int_to_str</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, auxiliary.o(i.int_to_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = int_to_str &rArr;  int_to_str (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_to_str
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChannelSelection_control
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFM_IQ_Dump_Done_Handler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFM_Demodulated_Data_Dump_Done_Handler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_to_str
</UL>

<P><STRONG><a name="[27]"></a>main</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[63]"></a>regWrite</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, code_def.o(i.regWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = regWrite &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY9
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY8
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY7
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY6
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY5
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY4
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY3
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY2
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY15
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY14
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY13
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY12
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY11
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY10
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY1
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY0
</UL>

<P><STRONG><a name="[59]"></a>singleFrequencyRSSI</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, code_def.o(i.singleFrequencyRSSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = singleFrequencyRSSI &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChannelSelection_control
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSSIScanHandler
</UL>

<P><STRONG><a name="[6c]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, dlef.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSSIScanscreen
</UL>

<P><STRONG><a name="[7c]"></a>_dcmple</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, dlef.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>

<P><STRONG><a name="[7d]"></a>_drcmple</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSSIScanscreen
</UL>

<P><STRONG><a name="[7e]"></a>_fadd</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, flef.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSSIScanscreen
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSSIScanHandler
</UL>

<P><STRONG><a name="[80]"></a>_fcmple</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, flef.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[60]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singleFrequencyRSSI
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regWrite
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSSIScanscreen
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Channel_control
</UL>

<P><STRONG><a name="[ba]"></a>_fmul</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)

<P><STRONG><a name="[6b]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singleFrequencyRSSI
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regWrite
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSSIScanscreen
</UL>

<P><STRONG><a name="[81]"></a>_fsub</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[43]"></a>_dadd1</STRONG> (Thumb, 290 bytes, Stack size 20 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[42]"></a>_dsub1</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[82]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[7f]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[52]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
